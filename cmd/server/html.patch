<script>
  /** 
   * Patch by web3url-gateway : Convert web3:// URLs into gateway URLs in various places
   */
  (function() {

    // Web3:// URL to Gateway URL convertor
    const convertWeb3UrlToGatewayUrl = function(web3Url) {
      // Parse the URL
      let matchResult = web3Url.match(/^(?<protocol>[^:]+):\/\/(?<hostname>[^:/?]+)(:(?<chainId>[1-9][0-9]*))?(?<path>.*)?$/)
      if(matchResult == null) {
        // Invalid web3:// URL
        return null;
      }
      let urlMainParts = matchResult.groups
  
      // Check protocol name
      if(["web3", "w3"].includes(urlMainParts.protocol) == false) {
        // Bad protocol name"
        return null;
      }
  
      // Get subdomain components
      let gateway = window.location.hostname.split('.').slice(-2).join('.') + (window.location.port ? ':' + window.location.port : '');
      let subDomains = []
      // Is the contract an ethereum address?
      if(/^0x[0-9a-fA-F]{40}$/.test(urlMainParts.hostname)) {
        subDomains.push(urlMainParts.hostname)
        if(urlMainParts.chainId !== undefined) {
          subDomains.push(urlMainParts.chainId)
        }
        else {
          subDomains.push(1);
        }
      }
      // It is a domain name
      else {
        if(urlMainParts.hostname.endsWith('.eth') && urlMainParts.chainId === undefined) {
          subDomains.push(urlMainParts.hostname)
          subDomains.push(1)
        }
        else {
          subDomains.push(urlMainParts.hostname)
          if(urlMainParts.chainId !== undefined) {
            subDomains.push(urlMainParts.chainId)
          }
        }
      }
  
      let gatewayUrl = window.location.protocol + "//" + subDomains.join(".") + "." + gateway + (urlMainParts.path ?? "")
      return gatewayUrl;
    }


    // Wrap the fetch() function to convert web3:// URLs into gateway URLs
    const originalFetch = fetch;
    fetch = function(input, init) {
      // Process absolute web3:// URLS: convert them into gateway HTTP RULS
      if (typeof input === 'string' && input.startsWith('web3://')) {
        const convertedUrl = convertWeb3UrlToGatewayUrl(input);
        if(convertedUrl == null) {
          console.error("Gateway fetch() wrapper: Unable to convert web3:// URL: " + input);
          return;
        }
        console.log('Gateway fetch() wrapper: Converted ' + input + ' to ' + convertedUrl);
        input = convertedUrl;
      }

      // Pipe through the original fetch function
      return originalFetch(input, init);
    };


    // Listen for clicks on <a> tags, and convert web3:// URLs into gateway URLs
    document.addEventListener('click', function(event) {
      const closestATag = event.target.closest('a');
      if(closestATag && closestATag.href.startsWith('web3://')) {
        event.preventDefault();
        const targetUrl = closestATag.href;
        const convertedUrl = convertWeb3UrlToGatewayUrl(targetUrl);
        if(convertedUrl == null) {
          console.error("Gateway A tag click wrapper: Unable to convert web3:// URL: " + targetUrl);
          return;
        }
        console.log('Gateway A tag click wrapper: Converted ' + targetUrl + ' to ' + convertedUrl);
        // If the A tag has a target="_blank" attribute, open the URL in a new tab
        if(closestATag.target === '_blank') {
          window.open(convertedUrl, '_blank');
        }
        else {
          window.location.href = convertedUrl;
        }
      }
    });


    // All tags with a attribute that can get an URL: override the setting of the attribute to convert web3:// URLs into gateway URLs
    const elementsWithUrlAttr = [
      {tagName: 'a', attrName: 'href'}, // <a>
      {tagName: 'link', attrName: 'href'}, // <link>
      {tagName: 'area', attrName: 'href'}, // <area>
      {tagName: 'img', attrName: 'src'}, // <img>
      {tagName: 'script', attrName: 'src'}, // <script>
      {tagName: 'iframe', attrName: 'src'}, // <iframe>
      // {tagName: 'audio', attr: 'src'}, // <audio>
      // {tagName: 'video', attr: 'src'}, // <video>
      {tagName: 'source', attrName: 'src'}, // <source>
      {tagName: 'embed', attrName: 'src'}, // <embed>
      {tagName: 'input', attrName: 'src'}, // <input type="image">
      {tagName: 'object', attrName: 'data'}, // <object>
      {tagName: 'image', attrName: 'href'}, // <image> of SVG
    ];
    // Override the setter of the attribute to convert web3:// URLs into gateway URLs
    elementsWithUrlAttr.forEach(function(elementWithUrlAttr) {
      const element = document.createElement(elementWithUrlAttr.tagName);
      const proto = element.constructor.prototype;
      const descriptor = Object.getOwnPropertyDescriptor(proto, elementWithUrlAttr.attrName);
      if (!descriptor || typeof descriptor.set !== 'function') {
        // Skip if no setter (e.g., SVG <image> 'href')
        return;
      }
      Object.defineProperty(proto, elementWithUrlAttr.attrName, {
        set: function(attrValue) {
          if(attrValue.startsWith('web3://')) {
            const convertedUrl = convertWeb3UrlToGatewayUrl(attrValue);
            if(convertedUrl == null) {
              console.error("Gateway " + element.name + " " + elementWithUrlAttr.attrName + " setter wrapper: Unable to convert web3:// URL: " + attrValue);
              descriptor.set.call(this, attrValue);
              return;
            }
            console.log('Gateway ' + element.name + ' ' + elementWithUrlAttr.attrName + ' setter wrapper: Converted ' + attrValue + ' to ' + convertedUrl);
            descriptor.set.call(this, convertedUrl);
          }
          else {
            descriptor.set.call(this, attrValue);
          }
        }
      });
    });
    // Added nodes to the DOM : convert web3:// URLs into gateway URLs
    const observer = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        // Insertion of nodes with the src attribute (img, iframe, audio, ...)
        if(mutation.type === 'childList') {
          mutation.addedNodes.forEach(function(addedNode) {
            // Ignore non-element nodes
            if(addedNode.nodeType != 1) {
              return;
            }
            // Find all nodes that have a web3:// URL in their attribute as defined in elementsWithUrlAttr
            elementsWithUrlAttr.forEach(function(elementWithUrlAttr) {
              const nodes = [...addedNode.querySelectorAll(elementWithUrlAttr.tagName + '[' + elementWithUrlAttr.attrName + '^="web3://"]')];
              // Check if the addedNode itself matches the tag and has the attribute starting with web3://
              if (
                addedNode.tagName === elementWithUrlAttr.tagName.toUpperCase() &&
                typeof addedNode.getAttribute === 'function' &&
                typeof addedNode.getAttribute(elementWithUrlAttr.attrName) === 'string' &&
                addedNode.getAttribute(elementWithUrlAttr.attrName).startsWith('web3://')
              ) {
                nodes.push(addedNode);
              }
              nodes.forEach(function(node) {
                const targetUrl = node.getAttribute(elementWithUrlAttr.attrName);
                const convertedUrl = convertWeb3UrlToGatewayUrl(targetUrl);
                if(convertedUrl == null) {
                  console.error("Gateway " + node.tagName + " injection wrapper: Unable to convert web3:// URL: " + targetUrl);
                  return;
                }
                console.log('Gateway ' + node.tagName + ' injection wrapper: Converted ' + targetUrl + ' to ' + convertedUrl);
                node.setAttribute(elementWithUrlAttr.attrName, convertedUrl);
              });
            });
          });
        }
      });
    });
    observer.observe(document.querySelector("body"), {childList: true, subtree: true});

  })();
</script>