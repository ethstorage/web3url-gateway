<script>
  /** 
   * Patch by web3url-gateway : Convert web3:// URLs into gateway URLs in various places
   */
  (function() {

    // Web3:// URL to Gateway URL convertor
    const convertWeb3UrlToGatewayUrl = function(web3Url) {
      // Parse the URL
      let matchResult = web3Url.match(/^(?<protocol>[^:]+):\/\/(?<hostname>[^:/?]+)(:(?<chainId>[1-9][0-9]*))?(?<path>.*)?$/)
      if(matchResult == null) {
        // Invalid web3:// URL
        return null;
      }
      let urlMainParts = matchResult.groups
  
      // Check protocol name
      if(["web3", "w3"].includes(urlMainParts.protocol) == false) {
        // Bad protocol name"
        return null;
      }
  
      // Get subdomain components
      let gateway = window.location.hostname.split('.').slice(-2).join('.') + (window.location.port ? ':' + window.location.port : '');
      let subDomains = []
      // Is the contract an ethereum address?
      if(/^0x[0-9a-fA-F]{40}$/.test(urlMainParts.hostname)) {
        subDomains.push(urlMainParts.hostname)
        if(urlMainParts.chainId !== undefined) {
          subDomains.push(urlMainParts.chainId)
        }
        else {
          subDomains.push(1);
        }
      }
      // It is a domain name
      else {
        if(urlMainParts.hostname.endsWith('.eth') && urlMainParts.chainId === undefined) {
          subDomains.push(urlMainParts.hostname)
          subDomains.push(1)
        }
        else {
          subDomains.push(urlMainParts.hostname)
          if(urlMainParts.chainId !== undefined) {
            subDomains.push(urlMainParts.chainId)
          }
        }
      }
  
      let gatewayUrl = window.location.protocol + "//" + subDomains.join(".") + "." + gateway + (urlMainParts.path ?? "")
      return gatewayUrl;
    }


    // Wrap the fetch() function to convert web3:// URLs into gateway URLs
    const originalFetch = fetch;
    fetch = function(input, init) {
      // Process absolute web3:// URLS: convert them into gateway HTTP RULS
      if (typeof input === 'string' && input.startsWith('web3://')) {
        const convertedUrl = convertWeb3UrlToGatewayUrl(input);
        if(convertedUrl == null) {
          console.error("Gateway fetch() wrapper: Unable to convert web3:// URL: " + input);
          return;
        }
        console.log('Gateway fetch() wrapper: Converted ' + input + ' to ' + convertedUrl);
        input = convertedUrl;
      }

      // Pipe through the original fetch function
      return originalFetch(input, init);
    };


    // Listen for clicks on <a> tags, and convert web3:// URLs into gateway URLs
    document.addEventListener('click', function(event) {
      const closestATag = event.target.closest('a');
      if(closestATag && closestATag.href.startsWith('web3://')) {
        event.preventDefault();
        const targetUrl = closestATag.href;
        const convertedUrl = convertWeb3UrlToGatewayUrl(targetUrl);
        if(convertedUrl == null) {
          console.error("Gateway A tag click wrapper: Unable to convert web3:// URL: " + targetUrl);
          return;
        }
        console.log('Gateway A tag click wrapper: Converted ' + targetUrl + ' to ' + convertedUrl);
        // If the A tag has a target="_blank" attribute, open the URL in a new tab
        if(closestATag.target === '_blank') {
          window.open(convertedUrl, '_blank');
        }
        else {
          window.location.href = convertedUrl;
        }
      }
    });


    // All tags with a attribute that can get an URL: override the setting of the attribute to convert web3:// URLs into gateway URLs
    const elementsWithUrlAttr = [
      {element: HTMLAnchorElement, attrName: 'href'}, // <a>
      {element: HTMLLinkElement, attrName: 'href'}, // <link>
      {element: HTMLAreaElement, attrName: 'href'}, // <area>
      {element: HTMLImageElement, attrName: 'src'}, // <img>
      {element: HTMLScriptElement, attrName: 'src'}, // <script>
      {element: HTMLIFrameElement, attrName: 'src'}, // <iframe>
      // {tag: HTMLAudioElement, attr: 'src'}, // <audio>
      // {tag: HTMLVideoElement, attr: 'src'}, // <video>
      {element: HTMLSourceElement, attrName: 'src'}, // <source>
      {element: HTMLEmbedElement, attrName: 'src'}, // <embed>
      {element: HTMLInputElement, attrName: 'src'}, // <input type="image">
      {element: HTMLObjectElement, attrName: 'data'}, // <object>
    ];
    elementsWithUrlAttr.forEach(function(elementWithUrlAttr) {
      const originalAttrSetter = Object.getOwnPropertyDescriptor(elementWithUrlAttr.element.prototype, elementWithUrlAttr.attrName).set;
      Object.defineProperty(elementWithUrlAttr.element.prototype, elementWithUrlAttr.attrName, {
        set: function(attrValue) {
          if(attrValue.startsWith('web3://')) {
            const convertedUrl = convertWeb3UrlToGatewayUrl(attrValue);
            if(convertedUrl == null) {
              console.error("Gateway " + elementWithUrlAttr.element.name + " " + elementWithUrlAttr.attrName + " setter wrapper: Unable to convert web3:// URL: " + attrValue);
              originalAttrSetter.call(this, attrValue);
              return;
            }
            console.log('Gateway ' + elementWithUrlAttr.element.name + ' ' + elementWithUrlAttr.attrName + ' setter wrapper: Converted ' + attrValue + ' to ' + convertedUrl);
            originalAttrSetter.call(this, convertedUrl);
          }
          else {
            originalAttrSetter.call(this, attrValue);
          }
        }
      });
    });

  })();
</script>